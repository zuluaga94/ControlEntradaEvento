@using EventControl.Shared.Enums;
@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="content">

        <div class="card-body">
            <div class="row">


                <div class="col-6">
                    <div class="mb-3">
                        <label>Eventos Atanasio Girardot:</label>
                        <div>
                            <InputNumber class="form-control" @bind-Value="@EventTicket.Id" />
                            <ValidationMessage For="@(() => EventTicket.Id)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label>Es Usada:</label>
                        <div>
                            <InputCheckbox class="form-control" @bind-Value="@EventTicket.Used" />
                            <ValidationMessage For="@(() => EventTicket.Used)" />
                        </div>
                    </div>

                </div>

                <div class="col-6">
                    <div class="mb-3">
                        <label>Fecha de Uso:</label>
                        <div>
                            <InputDate class="form-control" @bind-Value="@EventTicket.UsedDate" />
                            <ValidationMessage For="@(() => EventTicket.UsedDate)" />
                        </div>
                    </div>

                </div>

                <div class="mb-3">
                    <label>Ubicacion :</label>
                    <div>
                        <InputSelect class="form-select" @bind-Value="EventTicket.Location">
                            @foreach (var gatesType in Enum.GetValues(typeof(GatesType)))
                            {
                                <option value="@gatesType">@(gatesType.ToString())</option>
                            }


                        </InputSelect>
                    </div>
                </div>


            </div>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>



@code {
    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public EventTicket EventTicket { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(EventTicket);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}