@page "/eventTickets"
@using Blazored.Modal.Services;
@using Blazored.Modal;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

@if (Events is null)
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-briefcase"></i> Eventos Atanasio Girardot
@*                <a class="btn btn-sm btn-primary float-end" @onclick=@(() => ShowModal())><i class="oi oi-briefcase"></i> Adicionar Campañía</a>
*@            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Boleta..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>

            <Pagination CurrentPage="currentPage"
                    TotalPages="totalPages"
                    SelectedPage="SelectedPageAsync" />

            <GenericList MyList="Events">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                @* <th>Control de Eventos</th>*@
                                <th style="width:220px">Id Boleta</th>
                                <th style="width:220px">Fecha de Uso</th>
                                <th style="width:220px">Fue Usada</th>
                                <th style="width:220px">Porteria</th>
                                <th style="width:260px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var events in Events!)
                            {
                                <tr>
                                    <td>
                                        @events.Id
                                    </td>
                                    <td>
                                        @events.UsedDate
                                    </td>
                                    <td>
                                        @events.Used
                                    </td>
                                    <td>
                                        @events.Location
                                    </td>
                                    <td>

                                        <a @onclick=@(() => ShowModal(events.Id, true)) class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>

    @code {
    private int currentPage = 1;
    private int totalPages;

    public List<EventTicket>? Events { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = string.Empty;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;


    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"api/eventTickets?page={page}";
            url2 = $"api/eventTickets/totalPages";
        }
        else
        {
            url1 = $"api/eventTickets?page={page}&filter={Filter}";
            url2 = $"api/eventTickets/totalPages?filter={Filter}";
        }

        try
        {
            var responseHppt = await repository.Get<List<EventTicket>>(url1);
            var responseHppt2 = await repository.Get<int>(url2);
            Events = responseHppt.Response!;
            totalPages = responseHppt2.Response!;
        }
        catch (Exception ex)
        {
            await sweetAlertService.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            //modalReference = Modal.Show<CompanyEdit>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            //modalReference = Modal.Show<CompanyCreate>();
        }

        //var result = await modalReference.Result;
        //if (result.Confirmed)
        //{
        //    await LoadAsync();
        //}
    }


  }


}